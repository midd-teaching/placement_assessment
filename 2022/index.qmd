---
title: "Placement data"
author: "Joseph V. Casillas"
date: "Last update: `r Sys.Date()`"
format: 
  html:
    self-contained: true
---

# Setup

Load packages and data. 

```{r}
#| label: setup
#| warning: false
#| message: false
library("tidyverse")
library("readxl")
library("here")
library("janitor")
library("ggbeeswarm")
library("patchwork")

my_theme <- function(...) {
  list(
    theme_bw(), 
    theme(
      axis.title.y = element_text(size = rel(.9), hjust = 0.95),
      axis.title.x = element_text(size = rel(.9), hjust = 0.95),
      panel.grid.major = element_line(colour = 'grey90', size = 0.15),
      panel.grid.minor = element_line(colour = 'grey90', size = 0.15))
  )
}
```

```{r}
#| label: load-data
#| message: false
all_data <- read_xlsx(
  path = here("data", "tidy", "2022 compare placement to actual.xlsx"), 
  sheet = 2
  )
```

Clean up and create column for level changes. 

```{r}
#| label: clean-up
data_clean <- all_data %>% 
  clean_names() %>% 
  unite(id, nombre, apellido, sep = "_") %>% 
  select(id:examen) %>% 
  mutate(
    examen = na_if(examen, "D"), 
    examen = as.numeric(examen), 
    was_changed = if_else(colocacion_final != colocacion_inicial, 1, 0), 
    direction = case_when(
      colocacion_final - colocacion_inicial == 0 ~ "no_change", 
      colocacion_final < colocacion_inicial ~ "down", 
      colocacion_final > colocacion_inicial ~ "up"
    )
  )
```

# Data visualizations and descriptives

Overview of test scores

```{r}
#| label: scores
#| out.width: "100%"
data_clean %>% 
  na.omit() %>% 
  ggplot() + 
  aes(x = examen) + 
  geom_histogram(bins = 45, color = "black", fill = "grey90") + 
  coord_cartesian(xlim = c(-1, 46)) + 
  scale_x_continuous(breaks = seq(0, 45, 5)) + 
  labs(y = "Count", x = "Placement exam score") + 
  my_theme()
```

Test scores by original placement

```{r}
#| label: scores-placement-original
#| out.width: "100%"

initial <- data_clean %>% 
  na.omit() %>% 
  ggplot() + 
  aes(x = factor(colocacion_inicial), y = examen) + 
  geom_beeswarm(alpha = 0.6, aes(color = factor(direction)), 
    show.legend = F) + 
  stat_summary(fun.data = mean_sdl, geom = "pointrange", 
    pch = 21, fill = "white", stroke = 0.5, size = 1, 
    position = position_nudge(x = 0.25), fun.args = list(mult = 1)) + 
  scale_y_continuous(breaks = seq(0, 45, 5)) + 
  scale_color_viridis_d(begin = 0.3, end = 0.8) + 
  labs(y = "Placement exam score", x = "Initial placement") + 
  my_theme()

final <- data_clean %>% 
  na.omit() %>% 
  ggplot() + 
  aes(x = factor(colocacion_final), y = examen) + 
  geom_beeswarm(alpha = 0.6, aes(color = factor(direction))) + 
  stat_summary(fun.data = mean_sdl, geom = "pointrange", 
    pch = 21, fill = "white", stroke = 0.5, size = 1, 
    position = position_nudge(x = 0.25), fun.args = list(mult = 1)) + 
  scale_color_viridis_d(name = NULL, 
    labels = c("Moved down", "No change", "Moved up"), 
    begin = 0.3, end = 0.8) +
  scale_y_continuous(position = "right", breaks = seq(0, 45, 5)) + 
  labs(y = NULL, x = "Final placement") + 
  my_theme() + 
  theme(legend.position = c(0.8, 0.13))

initial + final
```

# Observations

1. The original placement procedure uses cut-offs, but it is clear that after placement changes, all classes overlap in exam scores, i.e., highest score in 1 is higher than lowest score in 1.5, highest score in 1.5 is higher than lowest score in 2, etc. 
2. Most scores are above 10. The initial categorization procedure should place more students in level 1. 
3. Students that move down tend to have the highest placement scores in their new level (blue dots). 
4. Students that move up tend to have the lowest placement scores in their new level (green dots). 
5. Observations (3) and (4) are logical, obvious conclusions, but, importantly, seem to indicate that the placement exam doesn't do a great job of... "placing"... we probably need something more than a grammar test (perhaps by supplementing the placement data with self-report data?). 
